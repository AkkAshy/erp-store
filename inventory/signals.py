# # signals.py ‚Äî –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –Ω–∞–ª–∏—á–Ω—ã—Ö
from django.db.models.signals import post_save
from django.dispatch import receiver
# from django.utils import timezone
# from decimal import Decimal
import logging
from inventory.models import ProductBatch, ExchangeRate

# from sales.models import TransactionItem, Transaction
# from django.db.models import Sum, Count, F
logger = logging.getLogger(__name__)


@receiver(post_save, sender=ProductBatch)
def save_exchange_rate_from_batch(sender, instance, created, **kwargs):
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫—É—Ä—Å –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞—Ç—á–∞ —Å USD
    """
    if instance.purchase_price_usd and instance.purchase_rate:
        from datetime import date
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è –±–∞—Ç—á–∞ –∏–ª–∏ —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é
        batch_date = instance.created_at.date() if instance.created_at else date.today()
        
        ExchangeRate.objects.update_or_create(
            date=batch_date,
            defaults={'usd_rate': instance.purchase_rate}
        )
        
        logger.info(
            f"–ö—É—Ä—Å {instance.purchase_rate} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –Ω–∞ {batch_date} "
            f"–∏–∑ –±–∞—Ç—á–∞ {instance.id}"
        )

# def sanitize(value: str) -> str:
#     """–£–±–∏—Ä–∞–µ—Ç –æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è SQLite"""
#     if not value:
#         return ""
#     return str(value).replace(":", "-")

# def should_process_cash_transaction(instance):
#     """
#     –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∫–∞–∫ –Ω–∞–ª–∏—á–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
#     """
#     if instance.payment_method == 'cash':
#         # –î–ª—è –º–µ—Ç–æ–¥–∞ "–Ω–∞–ª–∏—á–Ω—ã–µ" –ø—Ä–æ–≤–µ—Ä—è–µ–º total_amount
#         return instance.total_amount > 0
#     elif instance.payment_method == 'hybrid':
#         # –î–ª—è –≥–∏–±—Ä–∏–¥–Ω–æ–π –æ–ø–ª–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º cash_amount
#         return instance.cash_amount > 0
#     else:
#         # –î–ª—è –¥—Ä—É–≥–∏—Ö –º–µ—Ç–æ–¥–æ–≤ –Ω–∞–ª–∏—á–Ω–∞—è —á–∞—Å—Ç—å –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è
#         return False

# def get_effective_cash_amount(instance):
#     """
#     –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—É—é —Å—É–º–º—É –Ω–∞–ª–∏—á–Ω—ã—Ö —Å —É—á–µ—Ç–æ–º –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã
#     """
#     if instance.payment_method == 'cash':
#         return instance.total_amount
#     else:
#         return instance.cash_amount

# @receiver(post_save, sender=TransactionItem)
# def track_sales_from_transaction(sender, instance, created, **kwargs):
#     """
#     –ö–∞–∂–¥–∞—è –ø—Ä–æ–¥–∞–∂–∞ ‚Üí –∑–∞–ø–∏—Å—å –≤ StockHistory + –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–∫–∞
#     """
#     if created and instance.transaction.status == 'completed':
        
#         product = instance.product
#         store = instance.store
#         transaction = instance.transaction
        
#         # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–æ–∫ –î–û –ø—Ä–æ–¥–∞–∂–∏
#         stock, _ = Stock.objects.get_or_create(
#             product=product, 
#             store=store,
#             defaults={'quantity': 0}
#         )
#         quantity_before = stock.quantity
        
#         # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑ size_snapshot
#         size_instance = None
#         if instance.size_snapshot:
#             size_id = instance.size_snapshot.get('id')
#             if size_id:
#                 try:
#                     size_instance = SizeInfo.objects.get(id=size_id)
#                 except SizeInfo.DoesNotExist:
#                     logger.warning(f"–†–∞–∑–º–µ—Ä {size_id} –∏–∑ snapshot –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
#         # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ notes –±–µ–∑ –¥–≤–æ–µ—Ç–æ—á–∏–π
#         cashier_name = transaction.cashier.username if transaction.cashier else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
#         customer_name = transaction.customer.name if transaction.customer else "–ê–Ω–æ–Ω–∏–º–Ω—ã–π"
#         payment_method = str(transaction.payment_method)
#         quantity_str = str(float(instance.quantity))
        
#         safe_notes = sanitize(
#             f'–ü—Ä–æ–¥–∞–∂–∞ —á–µ–∫–∞ {transaction.id} '
#             f'–∫–∞—Å—Å–∏—Ä {cashier_name} '
#             f'–∫–ª–∏–µ–Ω—Ç {customer_name} '
#             f'–º–µ—Ç–æ–¥ {payment_method} '
#             f'–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ {quantity_str}'
#         )
        
#         # –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç–æ–∫–∞
#         StockHistory.objects.create(
#             product=product,
#             store=store,
#             quantity_before=quantity_before,
#             quantity_after=quantity_before - instance.quantity,
#             quantity_change=-instance.quantity,
#             operation_type='SALE',
#             reference_id=f'txn_{transaction.id}_item_{instance.id}',
#             user=transaction.cashier,
#             size=size_instance,
#             sale_price_at_time=instance.price,
#             purchase_price_at_time=product.price_info['purchase_prices']['average'] if product.price_info else 0,
#             notes=safe_notes
#         )
        
#         # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–æ–∫
#         stock.quantity -= instance.quantity
#         stock.save(update_fields=['quantity'])
        
#         # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –¥–µ–±–∞–≥–∞
#         logger.info(
#             f"‚úÖ –ü—Ä–æ–¥–∞–∂–∞ –∑–∞–ø–∏—Å–∞–Ω–∞: {product.name} x{instance.quantity} "
#             f"–ø–æ {instance.price} (—Å—Ç–æ–∫: {quantity_before} ‚Üí {stock.quantity})"
#         )
        
#         # –û–±–Ω–æ–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –±–∞—Ç—á–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
#         update_batch_attributes_on_sale(product, instance.quantity, size_instance, store)

# def update_batch_attributes_on_sale(product, sold_quantity, size_instance, store):
#     """
#     –û–¢–î–ï–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ–¥–∞–∂—É –ø–æ –∞—Ç—Ä–∏–±—É—Ç–∞–º –±–∞—Ç—á–∞
#     """
#     # –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—ã–µ –±–∞—Ç—á–∏ —Å –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏
#     active_batches = ProductBatch.objects.filter(
#         product=product,
#         store=store,
#         quantity__gt=0
#     ).select_related('attributes')
    
#     if not active_batches.exists():
#         logger.debug(f"–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–∞—Ç—á–µ–π –¥–ª—è {product.name}")
#         return
    
#     # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ (–ø—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞)
#     total_available = sum(batch.quantity for batch in active_batches)
#     if total_available == 0:
#         logger.warning(f"–û–±—â–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Å—Ç–æ–∫ –¥–ª—è {product.name} —Ä–∞–≤–µ–Ω 0")
#         return
    
#     remaining_to_sell = sold_quantity
#     for batch in active_batches:
#         if remaining_to_sell <= 0:
#             break
            
#         batch_share = min(
#             batch.quantity, 
#             remaining_to_sell * (batch.quantity / total_available)
#         )
        
#         # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞—Ç—á
#         batch.quantity -= batch_share
#         batch.save(update_fields=['quantity'])
        
#         # –û–±–Ω–æ–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –±–∞—Ç—á–∞
#         updated_attrs = 0
#         for batch_attr in batch.attributes.all():
#             if batch_attr.quantity > 0:
#                 attr_share = min(
#                     batch_attr.quantity, 
#                     batch_share * (batch_attr.quantity / batch.quantity if batch.quantity else 0)
#                 )
#                 batch_attr.quantity -= attr_share
#                 batch_attr.save(update_fields=['quantity'])
#                 updated_attrs += 1
        
#         remaining_to_sell -= batch_share
#         logger.debug(
#             f"–û–±–Ω–æ–≤–ª—ë–Ω –±–∞—Ç—á {batch.id}: -{batch_share}, "
#             f"–∞—Ç—Ä–∏–±—É—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_attrs}"
#         )
    
#     if remaining_to_sell > 0:
#         logger.warning(
#             f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤—Å—é –ø—Ä–æ–¥–∞–∂—É {sold_quantity} "
#             f"–¥–ª—è {product.name} ‚Äî –æ—Å—Ç–∞–ª–æ—Å—å {remaining_to_sell}"
#         )

# @receiver(post_save, sender=Transaction)
# def update_cash_register_and_analytics(sender, instance, created, **kwargs):
#     """
#     –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Å—Å–æ–≤–æ–≥–æ –∞–ø–ø–∞—Ä–∞—Ç–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –Ω–∞–ª–∏—á–Ω—ã—Ö
#     """
#     # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫—É—é –Ω–∞–ª–∏—á–Ω—É—é —Å—É–º–º—É
#     effective_cash_amount = get_effective_cash_amount(instance)
    
#     logger.info(f"üí∞ Cash signal triggered: Transaction {instance.id}, "
#                 f"created={created}, status={instance.status}")
#     logger.info(f"üí∞ Payment method: {instance.payment_method}, "
#                 f"cash_amount field: {instance.cash_amount}, "
#                 f"effective_cash_amount: {effective_cash_amount}, "
#                 f"total_amount: {instance.total_amount}, "
#                 f"Store: {instance.store.name}")
    
#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
#     if not should_process_cash_transaction(instance):
#         logger.info(f"üí∞ Skipping: payment_method={instance.payment_method}, "
#                    f"effective_cash={effective_cash_amount}")
#         return
    
#     # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
#     if instance.status != 'completed':
#         logger.info(f"üí∞ Skipping: transaction not completed, status={instance.status}")
#         return
    
#     logger.info(f"üí≥ Processing cash transaction: {effective_cash_amount} —Å—É–º")
    
#     # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Å—Å–æ–≤–æ–≥–æ –∞–ø–ø–∞—Ä–∞—Ç–∞
#     # –ù–∞–ø—Ä–∏–º–µ—Ä, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–∞ –Ω–∞–ª–∏—á–Ω—ã—Ö –≤ –∫–∞—Å—Å–µ
    
#     # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
#     logger.info(f"‚úÖ Cash transaction processed: {effective_cash_amount} —Å—É–º –≤ –º–∞–≥–∞–∑–∏–Ω–µ {instance.store.name}")

# @receiver(post_save, sender=Transaction)
# def track_transaction_financials(sender, instance, created, **kwargs):
#     """
#     –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è: –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–∏–±—Ä–∏–¥–Ω—ã–µ –æ–ø–ª–∞—Ç—ã
#     """
#     if created and instance.status == 'completed':
#         # –í—ã—á–∏—Å–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Å—É–º–º—É (–¥–ª—è –≥–∏–±—Ä–∏–¥–Ω–æ–π –æ–ø–ª–∞—Ç—ã)
#         actual_total = (
#             instance.cash_amount + 
#             instance.transfer_amount + 
#             instance.card_amount
#         )
        
#         if abs(actual_total - instance.total_amount) > Decimal('0.01'):  # –î–æ–ø—É—Å–∫ –Ω–∞ –∫–æ–ø–µ–π–∫–∏
#             logger.warning(
#                 f"–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—É–º–º –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ {instance.id}: "
#                 f"total_amount={instance.total_amount}, actual={actual_total}"
#             )
#             # –ú–æ–∂–Ω–æ –ø–æ–º–µ—Ç–∏—Ç—å –∫–∞–∫ —Ç—Ä–µ–±—É—é—â–µ–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
#             # instance.needs_review = True  # –ï—Å–ª–∏ –¥–æ–±–∞–≤–∏—à—å —Ç–∞–∫–æ–µ –ø–æ–ª–µ
#             # instance.save(update_fields=['needs_review'])
        
#         # –û–±–Ω–æ–≤–ª—è–µ–º –¥–Ω–µ–≤–Ω—É—é —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é —Å–≤–æ–¥–∫—É
#         update_daily_financial_summary(instance)

# def update_daily_financial_summary(transaction):
#     """
#     –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–Ω–µ–≤–Ω–æ–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Å–≤–æ–¥–∫–∏
#     –¢–µ–ø–µ—Ä—å –≤–∫–ª—é—á–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –º–∞—Ä–∂–∏
#     """
#     from stores.models import FinancialSummary
#     from sales.models import Transaction
#     from decimal import Decimal
#     from django.db.models import Sum, Count, Avg
#     import logging
    
#     logger = logging.getLogger(__name__)
    
#     try:
#         # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–∫—É –∑–∞ –¥–µ–Ω—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
#         summary, created = FinancialSummary.objects.get_or_create(
#             date=transaction.created_at.date(),
#             store=transaction.store,
#             defaults={
#                 'total_transactions': 0,
#                 'grand_total': Decimal('0'),
#                 'total_margin': Decimal('0'),
#                 'margin_percentage': Decimal('0'),
#                 'cash_total': Decimal('0'),
#                 'transfer_total': Decimal('0'),
#                 'card_total': Decimal('0'),
#                 'debt_total': Decimal('0'),
#                 'unique_customers': 0,
#                 'repeat_customers': 0,
#                 'customer_retention_rate': Decimal('0'),
#             }
#         )
        
#         if created:
#             logger.info(f"üìä –°–æ–∑–¥–∞–Ω–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å–≤–æ–¥–∫–∞: {transaction.store.name} - {transaction.created_at.date()}")
        
#         # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ –¥–µ–Ω—å
#         daily_transactions = Transaction.objects.filter(
#             store=transaction.store,
#             created_at__date=transaction.created_at.date(),
#             status='completed'
#         )
        
#         # –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º
#         transaction_stats = daily_transactions.aggregate(
#             total_count=Count('id'),
#             total_amount=Sum('total_amount') or Decimal('0'),
#             avg_amount=Avg('total_amount') or Decimal('0'),
#             total_cash=Sum('cash_amount') or Decimal('0'),
#             total_transfer=Sum('transfer_amount') or Decimal('0'),
#             total_card=Sum('card_amount') or Decimal('0'),
#             total_debt=Sum('debt_amount') or Decimal('0'),
#         )
        
#         # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
#         summary.total_transactions = transaction_stats['total_count']
#         summary.grand_total = transaction_stats['total_amount']
#         summary.avg_transaction = transaction_stats['avg_amount']
#         summary.cash_total = transaction_stats['total_cash']
#         summary.transfer_total = transaction_stats['total_transfer']
#         summary.card_total = transaction_stats['total_card']
#         summary.debt_total = transaction_stats['total_debt']
        
#         # –†–∞—Å—á–µ—Ç –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö –º–µ—Ç—Ä–∏–∫
#         update_customer_metrics(summary, daily_transactions)
        
#         # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–ø-–∫–∞—Å—Å–∏—Ä–∞
#         update_top_cashier(summary, daily_transactions)
        
#         # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–∑–æ–≤—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
#         summary.save()
        
#         # –ì–õ–ê–í–ù–û–ï: –†–∞—Å—á–µ—Ç –º–∞—Ä–∂–∏
#         margin_result = summary.calculate_margins()
        
#         # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
#         logger.info(
#             f"üí∞ –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å–≤–æ–¥–∫–∞ {summary.store.name} ({summary.date}):\n"
#             f"   –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {summary.total_transactions}\n"
#             f"   –í—ã—Ä—É—á–∫–∞: {summary.grand_total:,.0f} —Å—É–º\n"
#             f"   –ú–∞—Ä–∂–∞: {margin_result.get('margin', 0):,.0f} —Å—É–º ({margin_result.get('margin_percentage', 0):.1f}%)\n"
#             f"   –ö–ª–∏–µ–Ω—Ç–æ–≤: {summary.unique_customers} (–ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö: {summary.repeat_customers})"
#         )
        
#         # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–Ω–æ–º–∞–ª–∏–∏
#         check_summary_anomalies(summary, margin_result)
        
#         return summary
        
#     except Exception as e:
#         logger.error(
#             f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Å–≤–æ–¥–∫–∏ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ {transaction.id}: {str(e)}",
#             exc_info=True
#         )
#         return None

# def update_customer_metrics(summary, transactions):
#     """
#     –û–±–Ω–æ–≤–ª—è–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º
#     """
#     customers_today = set()
#     repeat_customers_count = 0
    
#     for trans in transactions:
#         if trans.customer_id:  # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∏–≤—è–∑–∫–∞ –∫ –∫–ª–∏–µ–Ω—Ç—É
#             customers_today.add(trans.customer_id)
            
#             # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–∫—É–ø–∞–ª –ª–∏ –∫–ª–∏–µ–Ω—Ç —Ä–∞–Ω–µ–µ
#             previous_purchases = Transaction.objects.filter(
#                 customer_id=trans.customer_id,
#                 created_at__date__lt=summary.date,
#                 status='completed'
#             ).exists()
            
#             if previous_purchases:
#                 repeat_customers_count += 1
    
#     summary.unique_customers = len(customers_today)
#     summary.repeat_customers = repeat_customers_count
#     summary.customer_retention_rate = (
#         Decimal(repeat_customers_count) / Decimal(len(customers_today)) * 100
#         if customers_today else Decimal('0')
#     )

# def update_top_cashier(summary, transactions):
#     """
#     –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ª—É—á—à–µ–≥–æ –∫–∞—Å—Å–∏—Ä–∞ –¥–Ω—è
#     """
#     from django.db.models import Sum
#     from stores.models import Employee
    
#     # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–æ–¥–∞–∂–∏ –ø–æ –∫–∞—Å—Å–∏—Ä–∞–º
#     cashier_stats = transactions.values('cashier_id').annotate(
#         total_sales=Sum('total_amount')
#     ).order_by('-total_sales')
    
#     if cashier_stats and cashier_stats[0]['cashier_id']:
#         try:
#             top_cashier = Employee.objects.get(id=cashier_stats[0]['cashier_id'])
#             summary.top_cashier = top_cashier
#             summary.top_cashier_sales = cashier_stats[0]['total_sales']
#         except Employee.DoesNotExist:
#             summary.top_cashier = None
#             summary.top_cashier_sales = Decimal('0')

# def check_summary_anomalies(summary, margin_result):
#     """
#     –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é —Å–≤–æ–¥–∫—É –Ω–∞ –∞–Ω–æ–º–∞–ª–∏–∏ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
#     """
#     import logging
#     logger = logging.getLogger(__name__)
    
#     warnings = []
    
#     # –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –ú–∞—Ä–∂–∞ = 0 –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –≤—ã—Ä—É—á–∫–∏
#     if summary.grand_total > 0 and summary.total_margin == 0:
#         warnings.append("üî¥ –ù—É–ª–µ–≤–∞—è –º–∞—Ä–∂–∞ –ø—Ä–∏ –Ω–µ–Ω—É–ª–µ–≤–æ–π –≤—ã—Ä—É—á–∫–µ")
    
#     # –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è –º–∞—Ä–∂–∞
#     if summary.total_margin < 0:
#         warnings.append(f"üî¥ –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è –º–∞—Ä–∂–∞: {summary.total_margin:,.0f} —Å—É–º")
    
#     # –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –û—á–µ–Ω—å –Ω–∏–∑–∫–∞—è –º–∞—Ä–∂–∞ (< 5%)
#     if 0 < summary.margin_percentage < 5:
#         warnings.append(f"üü° –ù–∏–∑–∫–∞—è –º–∞—Ä–∂–∞: {summary.margin_percentage:.1f}%")
    
#     # –ü—Ä–æ–≤–µ—Ä–∫–∞ 4: –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—É–º–º –æ–ø–ª–∞—Ç –∏ –æ–±—â–µ–π —Å—É–º–º—ã
#     payment_total = (
#         summary.cash_total + 
#         summary.transfer_total + 
#         summary.card_total + 
#         summary.debt_total
#     )
    
#     if abs(payment_total - summary.grand_total) > Decimal('1'):  # –î–æ–ø—É—Å–∫ 1 —Å—É–º
#         warnings.append(
#             f"üü° –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—É–º–º: "
#             f"–∏—Ç–æ–≥–æ {summary.grand_total:,.0f}, –æ–ø–ª–∞—Ç {payment_total:,.0f}"
#         )
    
#     # –ü—Ä–æ–≤–µ—Ä–∫–∞ 5: –ù–µ–æ–±—ã—á–Ω–æ –≤—ã—Å–æ–∫–∏–π —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫
#     if summary.avg_transaction > 500000:  # > 500k —Å—É–º
#         warnings.append(f"üü° –í—ã—Å–æ–∫–∏–π —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫: {summary.avg_transaction:,.0f} —Å—É–º")
    
#     # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
#     if warnings:
#         logger.warning(
#             f"‚ö†Ô∏è –ê–Ω–æ–º–∞–ª–∏–∏ –≤ —Å–≤–æ–¥–∫–µ {summary.store.name} ({summary.date}):\n" +
#             "\n".join(f"   {w}" for w in warnings)
#         )

# # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ (–º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –≤ Django shell)
# def recalculate_recent_summaries(days=7):
#     """
#     –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Å–≤–æ–¥–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π
#     """
#     from stores.models import FinancialSummary
#     from datetime import date, timedelta
#     import logging
    
#     logger = logging.getLogger(__name__)
    
#     start_date = date.today() - timedelta(days=days)
    
#     summaries = FinancialSummary.objects.filter(
#         date__gte=start_date,
#         grand_total__gt=0
#     ).order_by('date', 'store__name')
    
#     logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ—Å—á–µ—Ç {summaries.count()} —Å–≤–æ–¥–æ–∫ –∑–∞ {days} –¥–Ω–µ–π")
    
#     updated_count = 0
#     for summary in summaries:
#         try:
#             old_margin = summary.total_margin
#             result = summary.calculate_margins()
            
#             if abs(result['margin'] - old_margin) > Decimal('0.01'):
#                 logger.info(
#                     f"‚úÖ {summary.store.name} {summary.date}: "
#                     f"–º–∞—Ä–∂–∞ {old_margin:,.0f} ‚Üí {result['margin']:,.0f} —Å—É–º"
#                 )
#                 updated_count += 1
            
#         except Exception as e:
#             logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ {summary}: {e}")
    
#     logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count} —Å–≤–æ–¥–æ–∫")
#     return updated_count


# @receiver(post_save, sender=Transaction)
# def handle_transaction_refund(sender, instance, **kwargs):
#     """
#     –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞/–æ—Ç–º–µ–Ω—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–æ–∫
#     """
#     if instance.status == 'refunded' and not hasattr(instance, '_original_status'):
#         # –≠—Ç–æ –≤–æ–∑–≤—Ä–∞—Ç ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–≤–∞—Ä—ã –Ω–∞ —Å–∫–ª–∞–¥
        
#         for item in instance.items.all():
#             # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–æ–∫
#             stock, _ = Stock.objects.get_or_create(
#                 product=item.product,
#                 store=instance.store
#             )
#             stock.quantity += item.quantity
#             stock.save(update_fields=['quantity'])
            
#             # –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏–∏
#             StockHistory.objects.create(
#                 product=item.product,
#                 store=instance.store,
#                 quantity_before=stock.quantity - item.quantity,
#                 quantity_after=stock.quantity,
#                 quantity_change=item.quantity,  # –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
#                 operation_type='RETURN',
#                 reference_id=f'refund_{instance.id}_item_{item.id}',
#                 user=instance.cashier,
#                 size_id=item.size_snapshot.get('id') if item.size_snapshot else None,
#                 notes=f'–í–æ–∑–≤—Ä–∞—Ç –ø–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ {instance.id}'
#             )
            
#             logger.info(
#                 f"‚úÖ –í–æ–∑–≤—Ä–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {item.product.name} x{item.quantity} "
#                 f"(—Å—Ç–æ–∫: {stock.quantity - item.quantity} ‚Üí {stock.quantity})"
#             )
    
#     # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
#     if not hasattr(instance, '_original_status'):
#         instance._original_status = instance.status