# Generated by Django 5.2.1 on 2025-09-17 08:07

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Store',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='Название магазина')),
                ('logo', models.ImageField(blank=True, null=True, upload_to='store_logos/', verbose_name='Логотип')),
                ('address', models.TextField(help_text='Полный адрес магазина', verbose_name='Адрес')),
                ('phone', models.CharField(blank=True, max_length=20, verbose_name='Телефон')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='Email')),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
                ('min_markup_percent', models.DecimalField(decimal_places=2, default=10.0, help_text='Минимальный процент наценки на закупочную цену (например: 10%)', max_digits=5, verbose_name='Минимальная наценка %')),
                ('allow_sale_below_markup', models.BooleanField(default=False, help_text='Только для админов/владельцев', verbose_name='Разрешить продажу ниже минимальной наценки')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активен')),
                ('currency', models.CharField(default='UZS', max_length=3, verbose_name='Валюта')),
                ('tax_rate', models.DecimalField(decimal_places=2, default=0.0, max_digits=5, verbose_name='Налоговая ставка %')),
                ('low_stock_threshold', models.PositiveIntegerField(default=10, verbose_name='Порог низкого остатка')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='owned_stores', to=settings.AUTH_USER_MODEL, verbose_name='Владелец')),
            ],
            options={
                'verbose_name': 'Магазин',
                'verbose_name_plural': 'Магазины',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='StoreEmployee',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('owner', 'Владелец'), ('admin', 'Администратор'), ('manager', 'Менеджер'), ('cashier', 'Кассир'), ('stockkeeper', 'Кладовщик')], max_length=20, verbose_name='Роль в магазине')),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True)),
                ('can_manage_products', models.BooleanField(default=False, verbose_name='Может управлять товарами')),
                ('can_manage_sales', models.BooleanField(default=False, verbose_name='Может проводить продажи')),
                ('can_view_analytics', models.BooleanField(default=False, verbose_name='Может просматривать аналитику')),
                ('can_manage_employees', models.BooleanField(default=False, verbose_name='Может управлять сотрудниками')),
                ('store', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='store_employees', to='stores.store', verbose_name='Магазин')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='store_memberships', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Сотрудник магазина',
                'verbose_name_plural': 'Сотрудники магазина',
                'ordering': ['-joined_at'],
                'unique_together': {('store', 'user')},
            },
        ),
    ]
