# stores/management/commands/debug_stores.py
from django.core.management.base import BaseCommand
from django.contrib.auth.models import User
from stores.models import Store, StoreEmployee

class Command(BaseCommand):
    help = '–û—Ç–ª–∞–¥–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–æ–≤ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'

    def add_arguments(self, parser):
        parser.add_argument('--user', type=str, help='Username –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏')

    def handle(self, *args, **options):
        username = options.get('user')
        
        self.stdout.write(self.style.SUCCESS('=== –û–¢–õ–ê–î–ö–ê –ú–ê–ì–ê–ó–ò–ù–û–í ==='))
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –º–∞–≥–∞–∑–∏–Ω—ã
        stores = Store.objects.all()
        self.stdout.write(f"\nüìä –í—Å–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–æ–≤: {stores.count()}")
        for store in stores:
            self.stdout.write(f"  üè™ {store.name} (ID: {store.id}, Owner: {store.owner.username})")
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –º–∞–≥–∞–∑–∏–Ω–∞–º–∏
        users_with_stores = User.objects.filter(store_memberships__isnull=False).distinct()
        self.stdout.write(f"\nüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –º–∞–≥–∞–∑–∏–Ω–∞–º–∏: {users_with_stores.count()}")
        
        for user in users_with_stores:
            memberships = StoreEmployee.objects.filter(user=user)
            self.stdout.write(f"\n  üë§ {user.username}:")
            for membership in memberships:
                active = "‚úÖ" if membership.is_active else "‚ùå"
                self.stdout.write(f"    {active} {membership.store.name} ({membership.role})")
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        if username:
            try:
                user = User.objects.get(username=username)
                self.stdout.write(f"\nüîç –î–ï–¢–ê–õ–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø: {username}")
                self.stdout.write(f"  ID: {user.id}")
                self.stdout.write(f"  Email: {user.email}")
                self.stdout.write(f"  –ê–∫—Ç–∏–≤–µ–Ω: {user.is_active}")
                
                memberships = StoreEmployee.objects.filter(user=user)
                self.stdout.write(f"  –ú–∞–≥–∞–∑–∏–Ω–æ–≤: {memberships.count()}")
                
                for membership in memberships:
                    self.stdout.write(f"    - {membership.store.name}:")
                    self.stdout.write(f"      ID: {membership.store.id}")
                    self.stdout.write(f"      –†–æ–ª—å: {membership.role}")
                    self.stdout.write(f"      –ê–∫—Ç–∏–≤–µ–Ω: {membership.is_active}")
                    self.stdout.write(f"      –í–ª–∞–¥–µ–ª–µ—Ü: {membership.store.owner.username}")
                
            except User.DoesNotExist:
                self.stdout.write(self.style.ERROR(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{username}' –Ω–µ –Ω–∞–π–¥–µ–Ω"))
        
        self.stdout.write(self.style.SUCCESS('\n‚úÖ –û—Ç–ª–∞–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞'))