# services/store_access_service.py
import logging
from typing import Optional
from django.contrib.auth import get_user_model
from rest_framework.exceptions import ValidationError
from rest_framework_simplejwt.tokens import AccessToken
from stores.models import Store, StoreEmployee

logger = logging.getLogger(__name__)
User = get_user_model()

class StoreAccessService:
    """
    üé≠ –•—Ä–∞–Ω–∏—Ç–µ–ª—å —Ç–∞–π–Ω –º–∞–≥–∞–∑–∏–Ω–æ–≤ ‚Äî –∑–Ω–∞–µ—Ç, –∫—É–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—É—Ç—å –æ—Ç–∫—Ä—ã—Ç
    """
    
    def __init__(self):
        self._cache = {}  # –ö—ç—à –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    
    def get_current_store(self, user, request=None) -> Optional[Store]:
        """
        üåü –ì–ª–∞–≤–Ω—ã–π –æ—Ä–∞–∫—É–ª: –Ω–∞—Ö–æ–¥–∏—Ç —Ç–µ–∫—É—â–∏–π –º–∞–≥–∞–∑–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—É—Ç–µ–π –ø–æ–∏—Å–∫–∞, –∫–∞–∫ –º—É–¥—Ä—ã–π —Å–ª–µ–¥–æ–ø—ã—Ç
        """
        cache_key = f"{user.id}_current_store"
        if cache_key in self._cache:
            logger.debug(f"üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username}")
            return self._cache[cache_key]
        
        # –°–ø–æ—Å–æ–± 1: –ò–∑ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ middleware)
        if hasattr(user, 'current_store') and user.current_store:
            if self._user_has_access_to_store(user, user.current_store):
                logger.debug(f"‚úÖ –ú–∞–≥–∞–∑–∏–Ω –∏–∑ –∞—Ç—Ä–∏–±—É—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.current_store.name}")
                self._cache[cache_key] = user.current_store
                return user.current_store
            else:
                logger.warning(f"‚ö†Ô∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username} –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ {user.current_store.name}")

        # –°–ø–æ—Å–æ–± 2: –ß–µ—Ä–µ–∑ Employee –º–æ–¥–µ–ª—å
        if hasattr(user, 'employee') and user.employee and user.employee.store:
            store = user.employee.store
            if self._user_has_access_to_store(user, store):
                logger.debug(f"‚úÖ –ú–∞–≥–∞–∑–∏–Ω –∏–∑ Employee: {store.name}")
                user.current_store = store
                self._cache[cache_key] = store
                return store

        # –°–ø–æ—Å–æ–± 3: –ò–∑ JWT —Ç–æ–∫–µ–Ω–∞ –Ω–∞–ø—Ä—è–º—É—é
        if request:
            try:
                auth_header = request.META.get('HTTP_AUTHORIZATION', '')
                if auth_header.startswith('Bearer '):
                    token = auth_header.split(' ')[1]
                    decoded_token = AccessToken(token)
                    store_id = decoded_token.get('store_id')

                    if store_id:
                        store = Store.objects.get(id=store_id, is_active=True)
                        if self._user_has_access_to_store(user, store):
                            logger.debug(f"‚úÖ –ú–∞–≥–∞–∑–∏–Ω –∏–∑ JWT: {store.name}")
                            user.current_store = store
                            self._cache[cache_key] = store
                            return store
                        else:
                            logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∞–≥–∞–∑–∏–Ω—É –∏–∑ JWT: {store.name}")
            except Exception as e:
                logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω –∏–∑ JWT: {e}")

        # –°–ø–æ—Å–æ–± 4: –ë–µ—Ä–µ–º –ü–ï–†–í–´–ô –î–û–°–¢–£–ü–ù–´–ô –º–∞–≥–∞–∑–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        accessible_stores = self._get_user_accessible_stores(user)
        if accessible_stores:
            first_store = accessible_stores.first()
            logger.debug(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω: {first_store.name}")
            user.current_store = first_store
            self._cache[cache_key] = first_store
            return first_store

        logger.warning(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤ –¥–ª—è {user.username}")
        self._cache[cache_key] = None
        return None

    def _user_has_access_to_store(self, user, store) -> bool:
        """üîë –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–ª—é—á –∫ —ç—Ç–æ–º—É –º–∞–≥–∞–∑–∏–Ω—É"""
        return StoreEmployee.objects.filter(
            user=user,
            store=store,
            is_active=True
        ).exists()

    def _get_user_accessible_stores(self, user):
        """üó∫Ô∏è –ö–∞—Ä—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        accessible_store_ids = StoreEmployee.objects.filter(
            user=user,
            is_active=True
        ).values_list('store_id', flat=True)

        return Store.objects.filter(
            id__in=accessible_store_ids,
            is_active=True
        )

    def clear_cache_for_user(self, user):
        """üßπ –û—á–∏—â–∞–µ—Ç –∫—ç—à –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ–ª–µ–∑–Ω–æ –ø–æ—Å–ª–µ —Å–º–µ–Ω—ã –º–∞–≥–∞–∑–∏–Ω–∞)"""
        cache_key = f"{user.id}_current_store"
        if cache_key in self._cache:
            del self._cache[cache_key]
            logger.debug(f"üßπ –ö—ç—à –æ—á–∏—â–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username}")

    def get_user_stores_info(self, user) -> dict:
        """üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        accessible_stores = self._get_user_accessible_stores(user)
        return {
            'total_count': accessible_stores.count(),
            'store_names': list(accessible_stores.values_list('name', flat=True)),
            'has_access': accessible_stores.exists()
        }


# üé™ –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ (–∫–∞–∫ –µ–¥–∏–Ω—ã–π —Ü–µ–Ω—Ç—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è)
store_access_service = StoreAccessService()