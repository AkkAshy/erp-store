# stores/middleware.py
from django.utils.deprecation import MiddlewareMixin
import logging

logger = logging.getLogger(__name__)

class CurrentStoreMiddleware(MiddlewareMixin):
    """
    Middleware –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ JWT —Ç–æ–∫–µ–Ω–∞
    """
    def process_view(self, request, view_func, view_args, view_kwargs):
        # –ò–º–ø–æ—Ä—Ç—ã –≤–Ω—É—Ç—Ä–∏ –º–µ—Ç–æ–¥–∞ —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å circular imports
        from rest_framework_simplejwt.authentication import JWTAuthentication
        from django.contrib.auth.models import AnonymousUser
        
        logger.debug(f"üîç Processing {request.method} {request.path}")
        logger.debug(f"üë§ User: {request.user}, Type: {type(request.user)}")
        logger.debug(f"üîê Is authenticated: {request.user.is_authenticated}")
        logger.debug(f"üìã Headers: {dict(request.headers)}")

        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–µ endpoints
        public_paths = [
            '/api/stores/register/',
            '/api/stores/refresh-token/',
            '/users/login/',
            '/users/register/',
            '/admin/',
            '/swagger/',
            '/redoc/',
            '/static/',
            '/media/',
        ]

        if any(request.path.startswith(path) for path in public_paths):
            logger.debug(f"‚è≠Ô∏è Skipping public path: {request.path}")
            return None

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –º–∞–≥–∞–∑–∏–Ω–∞
        if not hasattr(request.user, 'current_store'):
            request.user.current_store = None
            request.user.store_role = None
            request.user.store_id = None

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if isinstance(request.user, AnonymousUser) or not request.user.is_authenticated:
            logger.debug("üë§ User not authenticated, skipping store setup")
            return None

        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ –≤–Ω—É—Ç—Ä–∏ try –±–ª–æ–∫–∞
            from .models import StoreEmployee, Store
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å JWT —Ç–æ–∫–µ–Ω –∏ –∏–∑–≤–ª–µ—á—å store_id
            jwt_auth = JWTAuthentication()
            auth_result = jwt_auth.authenticate(request)

            if auth_result:
                authenticated_user, validated_token = auth_result

                # –û–±–Ω–æ–≤–ª—è–µ–º request.user –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if request.user != authenticated_user:
                    request.user = authenticated_user

                # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–∞–≥–∞–∑–∏–Ω–∞ –∏–∑ —Ç–æ–∫–µ–Ω–∞
                store_id = validated_token.get('store_id')
                store_role = validated_token.get('store_role')

                logger.debug(f"üè™ Token store_id: {store_id}, role: {store_role}")

                if store_id:
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º –º–∞–≥–∞–∑–∏–Ω –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
                        store = Store.objects.get(id=store_id, is_active=True)

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –º–∞–≥–∞–∑–∏–Ω—É
                        store_membership = StoreEmployee.objects.filter(
                            user=request.user,
                            store=store,
                            is_active=True
                        ).first()

                        if store_membership:
                            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –º–∞–≥–∞–∑–∏–Ω–∞
                            request.user.current_store = store
                            request.user.store_role = store_membership.role
                            request.user.store_id = str(store.id)

                            logger.info(f"‚úÖ Store set: {store.name} for {request.user.username} ({store_membership.role})")
                            return None
                        else:
                            logger.warning(f"‚ö†Ô∏è User {request.user.username} has no access to store {store_id}")

                    except Store.DoesNotExist:
                        logger.error(f"‚ùå Store {store_id} not found")

                # –ï—Å–ª–∏ –º–∞–≥–∞–∑–∏–Ω –∏–∑ —Ç–æ–∫–µ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π
                store_membership = StoreEmployee.objects.filter(
                    user=request.user,
                    is_active=True
                ).select_related('store').first()

                if store_membership:
                    request.user.current_store = store_membership.store
                    request.user.store_role = store_membership.role
                    request.user.store_id = str(store_membership.store.id)

                    logger.info(f"‚úÖ Fallback store set: {store_membership.store.name}")
                else:
                    logger.warning(f"‚ö†Ô∏è No accessible stores found for user {request.user.username}")

            else:
                # JWT –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω
                logger.debug("üîë No JWT token, trying session-based store")

                store_membership = StoreEmployee.objects.filter(
                    user=request.user,
                    is_active=True
                ).select_related('store').first()

                if store_membership:
                    request.user.current_store = store_membership.store
                    request.user.store_role = store_membership.role
                    request.user.store_id = str(store_membership.store.id)

                    logger.info(f"‚úÖ Session store set: {store_membership.store.name}")

        except Exception as e:
            logger.error(f"‚ùå Error in store middleware: {str(e)}")
            # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É

        return None

    def process_response(self, request, response):
        # –õ–æ–≥–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if hasattr(request, 'user') and hasattr(request.user, 'current_store'):
            store_name = request.user.current_store.name if request.user.current_store else None
            logger.debug(f"üèÅ Final store for {request.path}: {store_name}")

        return response