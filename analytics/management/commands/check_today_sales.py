from django.core.management.base import BaseCommand
from decimal import Decimal
from datetime import date

from sales.models import Transaction
from stores.models import  Store
from inventory.models import FinancialSummary


class Command(BaseCommand):
    help = "–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥–∞–∂ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –º–∞—Ä–∂–∏"

    def handle(self, *args, **options):
        self.stdout.write("=" * 60)
        self.stdout.write("üìä –ê–ù–ê–õ–ò–ó –ü–†–û–î–ê–ñ –ó–ê –°–ï–ì–û–î–ù–Ø")
        self.stdout.write("=" * 60)

        today = date.today()
        store = Store.objects.get(name="Akkanat")

        self.stdout.write(f"üìÖ –î–∞—Ç–∞: {today}")
        self.stdout.write(f"üè™ –ú–∞–≥–∞–∑–∏–Ω: {store.name}")

        # –í—Å–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        today_transactions = Transaction.objects.filter(
            store=store,
            created_at__date=today,
            status="completed"
        ).order_by("-created_at")

        self.stdout.write(f"üõí –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {today_transactions.count()}")

        if not today_transactions.exists():
            self.stdout.write("‚ùå –ù–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è")
            return

        total_today = Decimal("0")

        self.stdout.write("\n" + "=" * 50)
        self.stdout.write("–î–ï–¢–ê–õ–ò –¢–†–ê–ù–ó–ê–ö–¶–ò–ô:")
        self.stdout.write("=" * 50)

        for i, trans in enumerate(today_transactions, 1):
            self.stdout.write(f"\nüßæ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è #{trans.id} ({i}/{today_transactions.count()})")
            self.stdout.write(f"   –í—Ä–µ–º—è: {trans.created_at.strftime('%H:%M:%S')}")
            self.stdout.write(f"   –°—É–º–º–∞: {trans.total_amount:,.0f} —Å—É–º")
            self.stdout.write(f"   –°—Ç–∞—Ç—É—Å: {trans.status}")

            items = trans.items.all()
            self.stdout.write(f"   –¢–æ–≤–∞—Ä–æ–≤: {items.count()}")

            for item in items:
                self.stdout.write(f"     üì¶ {item.product.name}")
                self.stdout.write(f"        –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item.quantity}")
                self.stdout.write(f"        –¶–µ–Ω–∞: {item.price:,.0f} —Å—É–º")
                self.stdout.write(f"        –°—É–º–º–∞: {item.quantity * item.price:,.0f} —Å—É–º")

            total_today += trans.total_amount

        self.stdout.write(f"\nüí∞ –û–ë–©–ò–ô –û–ë–û–†–û–¢ –ó–ê –°–ï–ì–û–î–ù–Ø: {total_today:,.0f} —Å—É–º")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Å–≤–æ–¥–∫–∏
        self.stdout.write("\n" + "=" * 50)
        self.stdout.write("–ü–†–û–í–ï–†–ö–ê –§–ò–ù–ê–ù–°–û–í–û–ô –°–í–û–î–ö–ò:")
        self.stdout.write("=" * 50)

        try:
            summary = FinancialSummary.objects.get(date=today, store=store)
            self.stdout.write(f"üìä –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å–≤–æ–¥–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ (ID {summary.id})")
            self.stdout.write(f"   –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {summary.total_transactions}")
            self.stdout.write(f"   –í—ã—Ä—É—á–∫–∞: {summary.grand_total:,.0f} —Å—É–º")
            self.stdout.write(f"   –ú–∞—Ä–∂–∞: {summary.total_margin:,.0f} —Å—É–º")
            self.stdout.write(f"   % –º–∞—Ä–∂–∏: {summary.margin_percentage:.2f}%")
            self.stdout.write(f"   –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {summary.updated_at}")

            if abs(summary.grand_total - total_today) > 1:
                self.stdout.write("‚ö†Ô∏è –†–ê–°–•–û–ñ–î–ï–ù–ò–ï –≤ –≤—ã—Ä—É—á–∫–µ!")
            if summary.total_margin == 0 and summary.grand_total > 0:
                self.stdout.write("üî¥ –ü–†–û–ë–õ–ï–ú–ê: –Ω—É–ª–µ–≤–∞—è –º–∞—Ä–∂–∞ –ø—Ä–∏ –Ω–µ–Ω—É–ª–µ–≤–æ–π –≤—ã—Ä—É—á–∫–µ!")

        except FinancialSummary.DoesNotExist:
            self.stdout.write("‚ùå –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å–≤–æ–¥–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –ù–ï –Ω–∞–π–¥–µ–Ω–∞!")

        self.stdout.write("\n" + "=" * 60)
        self.stdout.write("üéØ –ò–¢–û–ì")
        self.stdout.write("=" * 60)
        self.stdout.write(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {today_transactions.count()}")
        self.stdout.write(f"üí∞ –û–±—â–∏–π –æ–±–æ—Ä–æ—Ç: {total_today:,.0f} —Å—É–º")
