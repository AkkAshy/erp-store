from django.core.management.base import BaseCommand
from django.db import transaction
from django.db.models import Count, Sum
from analytics.models import SalesSummary, ProductAnalytics, CustomerAnalytics
from sales.models import Transaction
import logging

logger = logging.getLogger(__name__)

class Command(BaseCommand):
    help = '–û—á–∏—â–∞–µ—Ç –¥—É–±–ª–∏—Ä—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ'

    def add_arguments(self, parser):
        parser.add_argument('--store-id', type=str, required=True, help='ID –º–∞–≥–∞–∑–∏–Ω–∞')
        parser.add_argument('--execute', action='store_true', help='–í—ã–ø–æ–ª–Ω–∏—Ç—å –æ—á–∏—Å—Ç–∫—É')
        parser.add_argument('--verbose', action='store_true', help='–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥')

    def handle(self, *args, **options):
        store_id = options['store_id']
        execute = options.get('execute', False)
        verbose = options.get('verbose', False)

        if not execute:
            self.stdout.write(self.style.WARNING('üîç –†–ï–ñ–ò–ú –ü–†–û–°–ú–û–¢–†–ê. –î–æ–±–∞–≤—å—Ç–µ --execute –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è'))

        total_cleaned = 0

        # 1. –û—á–∏—â–∞–µ–º SalesSummary
        total_cleaned += self._clean_sales_summary(store_id, execute, verbose)

        # 2. –û—á–∏—â–∞–µ–º ProductAnalytics
        total_cleaned += self._clean_product_analytics(store_id, execute, verbose)

        # 3. –û—á–∏—â–∞–µ–º CustomerAnalytics
        total_cleaned += self._clean_customer_analytics(store_id, execute, verbose)

        if execute:
            self.stdout.write(self.style.SUCCESS(f'‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ {total_cleaned} –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π'))
        else:
            self.stdout.write(self.style.WARNING(f'üëÄ –ù–∞–π–¥–µ–Ω–æ {total_cleaned} –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π'))

    def _clean_sales_summary(self, store_id, execute, verbose):
        """–û—á–∏—â–∞–µ—Ç –¥—É–±–ª–∏ –≤ SalesSummary"""
        self.stdout.write('\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ SalesSummary...')

        # –ù–∞–π—Ç–∏ –≥—Ä—É–ø–ø—ã —Å –¥—É–±–ª—è–º–∏
        duplicates = SalesSummary.objects.filter(
            store_id=store_id
        ).values('store', 'date', 'payment_method').annotate(
            count=Count('id')
        ).filter(count__gt=1)

        if not duplicates.exists():
            self.stdout.write('   ‚úÖ –î—É–±–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
            return 0

        cleaned_count = 0

        for dup in duplicates:
            store = dup['store']
            date = dup['date']
            payment_method = dup['payment_method']

            if verbose:
                self.stdout.write(f'   üîç –ì—Ä—É–ø–ø–∞: {date} {payment_method} ({dup["count"]} –∑–∞–ø–∏—Å–µ–π)')

            if execute:
                with transaction.atomic():
                    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –≥—Ä—É–ø–ø—ã
                    records = SalesSummary.objects.filter(
                        store=store,
                        date=date,
                        payment_method=payment_method
                    ).order_by('id')

                    # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
                    real_transactions = Transaction.objects.filter(
                        store=store,
                        created_at__date=date,
                        payment_method=payment_method,
                        status='completed'
                    )

                    correct_amount = real_transactions.aggregate(
                        total=Sum('total_amount')
                    )['total'] or 0

                    correct_count = real_transactions.count()

                    correct_items = 0
                    for tx in real_transactions:
                        items_sum = tx.items.aggregate(Sum('quantity'))['quantity__sum']
                        correct_items += items_sum or 0

                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
                    first_record = records.first()
                    first_record.total_amount = correct_amount
                    first_record.total_transactions = correct_count
                    first_record.total_items_sold = correct_items
                    first_record.save()

                    # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏
                    duplicates_to_delete = records.exclude(id=first_record.id)
                    deleted_count = duplicates_to_delete.count()
                    duplicates_to_delete.delete()

                    cleaned_count += deleted_count

                    if verbose:
                        self.stdout.write(f'     ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: {correct_amount} ({correct_count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π)')
                        self.stdout.write(f'     üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ {deleted_count} –¥—É–±–ª–µ–π')
            else:
                cleaned_count += dup['count'] - 1  # –í—Å–µ –∫—Ä–æ–º–µ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏

        self.stdout.write(f'   üìà SalesSummary: {"—É–¥–∞–ª–µ–Ω–æ" if execute else "–Ω–∞–π–¥–µ–Ω–æ"} {cleaned_count} –¥—É–±–ª–µ–π')
        return cleaned_count

    def _clean_product_analytics(self, store_id, execute, verbose):
        """–û—á–∏—â–∞–µ—Ç –¥—É–±–ª–∏ –≤ ProductAnalytics"""
        self.stdout.write('\nüõçÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ ProductAnalytics...')

        duplicates = ProductAnalytics.objects.filter(
            product__store_id=store_id
        ).values('product', 'date').annotate(
            count=Count('id')
        ).filter(count__gt=1)

        if not duplicates.exists():
            self.stdout.write('   ‚úÖ –î—É–±–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
            return 0

        cleaned_count = 0

        for dup in duplicates:
            if execute:
                with transaction.atomic():
                    records = ProductAnalytics.objects.filter(
                        product=dup['product'],
                        date=dup['date']
                    ).order_by('id')

                    # –û—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å, —É–¥–∞–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ
                    first_record = records.first()
                    duplicates_to_delete = records.exclude(id=first_record.id)
                    deleted_count = duplicates_to_delete.count()
                    duplicates_to_delete.delete()

                    cleaned_count += deleted_count
            else:
                cleaned_count += dup['count'] - 1

        self.stdout.write(f'   üõçÔ∏è ProductAnalytics: {"—É–¥–∞–ª–µ–Ω–æ" if execute else "–Ω–∞–π–¥–µ–Ω–æ"} {cleaned_count} –¥—É–±–ª–µ–π')
        return cleaned_count

    def _clean_customer_analytics(self, store_id, execute, verbose):
        """–û—á–∏—â–∞–µ—Ç –¥—É–±–ª–∏ –≤ CustomerAnalytics"""
        self.stdout.write('\nüë• –ü—Ä–æ–≤–µ—Ä–∫–∞ CustomerAnalytics...')

        duplicates = CustomerAnalytics.objects.filter(
            customer__store_id=store_id
        ).values('customer', 'date').annotate(
            count=Count('id')
        ).filter(count__gt=1)

        if not duplicates.exists():
            self.stdout.write('   ‚úÖ –î—É–±–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
            return 0

        cleaned_count = 0

        for dup in duplicates:
            if execute:
                with transaction.atomic():
                    records = CustomerAnalytics.objects.filter(
                        customer=dup['customer'],
                        date=dup['date']
                    ).order_by('id')

                    # –û—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å, —É–¥–∞–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ
                    first_record = records.first()
                    duplicates_to_delete = records.exclude(id=first_record.id)
                    deleted_count = duplicates_to_delete.count()
                    duplicates_to_delete.delete()

                    cleaned_count += deleted_count
            else:
                cleaned_count += dup['count'] - 1

        self.stdout.write(f'   üë• CustomerAnalytics: {"—É–¥–∞–ª–µ–Ω–æ" if execute else "–Ω–∞–π–¥–µ–Ω–æ"} {cleaned_count} –¥—É–±–ª–µ–π')
        return cleaned_count