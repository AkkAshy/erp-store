# sales/signals.py - –ï–î–ò–ù–´–ô –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –§–ê–ô–õ
from django.db.models.signals import post_save, pre_save
from django.dispatch import receiver
from django.utils import timezone
from decimal import Decimal
import logging
import json
from django.db.models import F
from django.db import  transaction as db_transaction 

logger = logging.getLogger(__name__)

# ================== PRE-SAVE SIGNALS ==================

@receiver(pre_save, sender='sales.Transaction')
def track_original_status(sender, instance, **kwargs):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π —Å—Ç–∞—Ç—É—Å –ø–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"""
    if instance.pk:
        try:
            from sales.models import Transaction
            old = Transaction.objects.get(pk=instance.pk)
            instance._old_status = old.status
        except Transaction.DoesNotExist:
            instance._old_status = None
    else:
        instance._old_status = None


# ================== TRANSACTION SIGNALS ==================

@receiver(post_save, sender='sales.Transaction')
def handle_transaction_complete(sender, instance, created, **kwargs):
    """
    –ì–ª–∞–≤–Ω—ã–π —Å–∏–≥–Ω–∞–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
    """
    from sales.models import TransactionHistory
    
    logger.info(f"üìç Transaction signal: ID={instance.id}, created={created}, "
                f"status={instance.status}, cash={instance.cash_amount}")
    
    # 1. –°–æ–∑–¥–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    if created or instance.status in ['completed', 'refunded', 'cancelled']:
        try:
            action = 'created' if created else instance.status
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞
            if not hasattr(instance, 'store') or not instance.store:
                logger.error(f"‚ùå Transaction {instance.id} has no store!")
                return
            
            details = {
                'transaction_id': instance.id,
                'total_amount': str(instance.total_amount),
                'payment_method': instance.payment_method,
                'cash_amount': str(instance.cash_amount),
                'card_amount': str(instance.card_amount),
                'transfer_amount': str(instance.transfer_amount),
                'cashier': instance.cashier.username if instance.cashier else None,
                'customer': instance.customer.name if instance.customer else None,
                'store_id': str(instance.store.id),
                'store_name': instance.store.name
            }
            
            TransactionHistory.objects.get_or_create(
                transaction=instance,
                action=action,
                defaults={
                    'details': json.dumps(details, ensure_ascii=False),
                    'store': instance.store,
                    'created_at': timezone.now()
                }
            )
            logger.info(f"‚úÖ Transaction history created for {instance.id}")
            
        except Exception as e:
            logger.error(f"‚ùå Error creating transaction history: {e}", exc_info=True)
    
    # 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    old_status = getattr(instance, "_old_status", None)
    
    if (created and instance.status == "completed") or \
       (not created and old_status != "completed" and instance.status == "completed"):
        
        logger.info(f"‚úÖ Processing completed transaction {instance.id}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Å—Å—É –¥–ª—è –Ω–∞–ª–∏—á–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
        if instance.cash_amount > 0:
            update_cash_register_on_sale(instance)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é —Å–≤–æ–¥–∫—É
        update_daily_financial_summary(instance)
    
    # 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    if instance.status == 'refunded' and old_status != 'refunded':
        logger.info(f"üîÑ Processing refund for transaction {instance.id}")
        handle_transaction_refund(instance)


def update_cash_register_on_sale(transaction):
    """
    –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Å—Å–æ–≤–æ–≥–æ –∞–ø–ø–∞—Ä–∞—Ç–∞ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ —Å –Ω–∞–ª–∏—á–Ω—ã–º–∏
    """
    from analytics.models import CashRegister, CashHistory
    
    if transaction.cash_amount <= 0:
        return False
    
    store = transaction.store
    
    logger.info(f"üí∞ Updating cash register for transaction {transaction.id}: "
                f"{transaction.cash_amount} —Å—É–º")
    
    try:
        with db_transaction.atomic():
            # –ù–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—É—é –∫–∞—Å—Å—É
            today = timezone.now().date()
            
            cash_register = CashRegister.objects.filter(
                store=store,
                date_opened__date=today,
                is_open=True
            ).select_for_update().first()
            
            if not cash_register:
                cash_register = CashRegister.objects.create(
                    store=store,
                    current_balance=Decimal('0.00'),
                    target_balance=Decimal('0.00'),
                    is_open=True,
                    date_opened=timezone.now()
                )
                logger.info(f"‚úÖ Created new cash register {cash_register.id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            existing = CashHistory.objects.filter(
                cash_register=cash_register,
                notes__contains=f"–ü—Ä–æ–¥–∞–∂–∞ #{transaction.id}",
                operation_type='ADD_CASH'
            ).exists()
            
            if existing:
                logger.warning(f"‚ö†Ô∏è Transaction {transaction.id} already in cash register")
                return False
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
            balance_before = cash_register.current_balance
            new_balance = balance_before + transaction.cash_amount
            
            CashRegister.objects.filter(id=cash_register.id).update(
                current_balance=new_balance,
                last_updated=timezone.now()
            )
            
            cash_register.refresh_from_db()
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏
            CashHistory.objects.create(
                cash_register=cash_register,
                operation_type='ADD_CASH',
                amount=transaction.cash_amount,
                user=transaction.cashier,
                store=store,
                notes=f"–ü—Ä–æ–¥–∞–∂–∞ #{transaction.id}",
                balance_before=balance_before,
                balance_after=new_balance
            )
            
            logger.info(f"‚úÖ Cash register updated: +{transaction.cash_amount}, "
                       f"balance: {balance_before} ‚Üí {new_balance}")
            
            return True
            
    except Exception as e:
        logger.error(f"‚ùå Error updating cash register: {e}", exc_info=True)
        return False


def update_daily_financial_summary(transaction):
    """
    –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω–æ–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Å–≤–æ–¥–∫–∏ —Å —Ä–∞—Å—á–µ—Ç–æ–º –º–∞—Ä–∂–∏
    """
    from inventory.models import FinancialSummary
    from sales.models import Transaction
    from django.db.models import Sum, Count, Avg
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–∫—É
        summary, created = FinancialSummary.objects.get_or_create(
            date=transaction.created_at.date(),
            store=transaction.store,
            defaults={
                'total_transactions': 0,
                'grand_total': Decimal('0'),
                'total_margin': Decimal('0'),
                'margin_percentage': Decimal('0'),
                'cash_total': Decimal('0'),
                'transfer_total': Decimal('0'),
                'card_total': Decimal('0'),
                'debt_total': Decimal('0'),
            }
        )
        
        if created:
            logger.info(f"üìä Created financial summary for {transaction.store.name} "
                       f"on {transaction.created_at.date()}")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ –¥–µ–Ω—å
        daily_transactions = Transaction.objects.filter(
            store=transaction.store,
            created_at__date=transaction.created_at.date(),
            status='completed'
        )
        
        # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ (–æ–±—Ö–æ–¥–∏–º –ø—Ä–æ–±–ª–µ–º—É —Å Avg)
        stats = daily_transactions.aggregate(
            total_count=Count('id'),
            total_amount=Sum('total_amount'),
            total_cash=Sum('cash_amount'),
            total_transfer=Sum('transfer_amount'),
            total_card=Sum('card_amount'),
        )
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π —Å –¥–µ—Ñ–æ–ª—Ç–∞–º–∏
        total_count = stats['total_count'] or 0
        total_amount = stats['total_amount'] or Decimal('0')
        total_cash = stats['total_cash'] or Decimal('0')
        total_transfer = stats['total_transfer'] or Decimal('0')
        total_card = stats['total_card'] or Decimal('0')
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä—É—á–Ω—É—é
        avg_amount = (total_amount / total_count) if total_count > 0 else Decimal('0')
        
        # –í—ã—á–∏—Å–ª—è–µ–º debt –∫–∞–∫ —Ä–∞–∑–Ω–∏—Ü—É (–µ—Å–ª–∏ –Ω–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—è)
        total_debt = total_amount - (total_cash + total_transfer + total_card)
        if total_debt < 0:
            total_debt = Decimal('0')
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è
        summary.total_transactions = total_count
        summary.grand_total = total_amount
        summary.avg_transaction = avg_amount
        summary.cash_total = total_cash
        summary.transfer_total = total_transfer
        summary.card_total = total_card
        summary.debt_total = total_debt
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–∑–æ–≤—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        summary.save()
        
        # –†–∞—Å—á–µ—Ç –º–∞—Ä–∂–∏ (–µ—Å–ª–∏ –º–µ—Ç–æ–¥ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        if hasattr(summary, 'calculate_margins'):
            margin_result = summary.calculate_margins()
            logger.info(
                f"üí∞ Updated summary {summary.store.name} ({summary.date}):\n"
                f"   Transactions: {summary.total_transactions}\n"
                f"   Revenue: {summary.grand_total:,.0f} —Å—É–º\n"
                f"   Margin: {margin_result.get('margin', 0):,.0f} —Å—É–º "
                f"({margin_result.get('margin_percentage', 0):.1f}%)"
            )
        
        return summary
        
    except Exception as e:
        logger.error(f"‚ùå Error updating financial summary: {e}", exc_info=True)
        return None


def handle_transaction_refund(instance):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    """
    from inventory.models import Stock, StockHistory
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–≤–∞—Ä—ã –Ω–∞ —Å–∫–ª–∞–¥
    for item in instance.items.all():
        stock, _ = Stock.objects.get_or_create(
            product=item.product,
            store=instance.store,
            defaults={'quantity': 0}
        )
        
        old_quantity = stock.quantity
        stock.quantity += item.quantity
        stock.save(update_fields=['quantity'])
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏
        StockHistory.objects.create(
            product=item.product,
            store=instance.store,
            quantity_before=old_quantity,
            quantity_after=stock.quantity,
            quantity_change=item.quantity,
            operation_type='RETURN',
            reference_id=f'refund_{instance.id}_item_{item.id}',
            user=instance.cashier,
            notes=f'–í–æ–∑–≤—Ä–∞—Ç –ø–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ {instance.id}'
        )
        
        logger.info(f"‚úÖ Refund processed: {item.product.name} x{item.quantity} "
                   f"(stock: {old_quantity} ‚Üí {stock.quantity})")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–Ω—å–≥–∏ –∏–∑ –∫–∞—Å—Å—ã
    if instance.cash_amount > 0:
        handle_cash_refund(instance)


def handle_cash_refund(transaction):
    """
    –í–æ–∑–≤—Ä–∞—Ç –Ω–∞–ª–∏—á–Ω—ã—Ö –∏–∑ –∫–∞—Å—Å—ã
    """
    from analytics.models import CashRegister, CashHistory
    
    store = transaction.store
    refund_amount = transaction.cash_amount
    
    today = timezone.now().date()
    cash_register = CashRegister.objects.filter(
        store=store,
        date_opened__date=today,
        is_open=True
    ).first()
    
    if not cash_register:
        logger.error(f"‚ùå No open cash register for refund {refund_amount}")
        return
    
    try:
        if cash_register.current_balance >= refund_amount:
            balance_before = cash_register.current_balance
            cash_register.current_balance -= refund_amount
            cash_register.save(update_fields=['current_balance', 'last_updated'])
            
            CashHistory.objects.create(
                cash_register=cash_register,
                operation_type='WITHDRAW',
                amount=refund_amount,
                user=transaction.cashier,
                store=store,
                notes=f"–í–æ–∑–≤—Ä–∞—Ç –ø–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ {transaction.id}",
                balance_before=balance_before,
                balance_after=cash_register.current_balance
            )
            
            logger.info(f"‚úÖ Cash refund processed: -{refund_amount} —Å—É–º")
        else:
            logger.error(f"‚ùå Insufficient cash for refund: need {refund_amount}, "
                        f"have {cash_register.current_balance}")
    except Exception as e:
        logger.error(f"‚ùå Error processing cash refund: {e}", exc_info=True)


# ================== TRANSACTION ITEM SIGNALS ==================

@receiver(post_save, sender='sales.Transaction')
def track_sales_from_transaction_status(sender, instance, created, **kwargs):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–∞ completed
    """
    if not created and instance.status == 'completed':
        logger.info(f"üí∞ Transaction {instance.id} completed, processing analytics for items")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ items —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        for item in instance.items.all():
            process_sale_analytics(item)


def process_sale_analytics(transaction_item):
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø—Ä–æ–¥–∞–∂–∏
    """
    from inventory.models import Stock, StockHistory, SizeInfo
    from analytics.models import SupplierAnalytics
    
    product = transaction_item.product
    store = transaction_item.store
    transaction = transaction_item.transaction
    
    logger.info(f"üìä Processing analytics for sale: {product.name} x{transaction_item.quantity}")
    
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–æ–∫ (—É–∂–µ —Å–¥–µ–ª–∞–Ω–æ –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º)
        stock = Stock.objects.filter(product=product, store=store).first()
        if not stock:
            logger.warning(f"‚ö†Ô∏è Stock not found for {product.name} in {store.name}")
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑ snapshot
        size_instance = None
        if transaction_item.size_snapshot:
            size_id = transaction_item.size_snapshot.get('id')
            if size_id:
                try:
                    size_instance = SizeInfo.objects.get(id=size_id)
                except SizeInfo.DoesNotExist:
                    logger.warning(f"Size {size_id} from snapshot not found")
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫—É–ø–æ—á–Ω—É—é —Ü–µ–Ω—É
        purchase_price = Decimal('0')
        if product.price_info and 'purchase_prices' in product.price_info:
            purchase_prices = product.price_info.get('purchase_prices', {})
            purchase_price = Decimal(str(
                purchase_prices.get('average', 0) or 
                purchase_prices.get('latest', 0)
            ))
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –∏–∑ –±–∞—Ç—á–µ–π
        supplier_name = get_supplier_from_batches(product, store, size_instance)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
        today = timezone.now().date()
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º select_for_update –¥–ª—è –∞—Ç–æ–º–∞—Ä–Ω–æ—Å—Ç–∏
            analytics = SupplierAnalytics.objects.select_for_update().filter(
                store=store,
                date=today,
                supplier=supplier_name
            ).first()
            
            if not analytics:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                analytics = SupplierAnalytics.objects.create(
                    store=store,
                    date=today,
                    supplier=supplier_name,
                    total_quantity_sold=0,
                    total_revenue=Decimal('0'),
                    total_cost=Decimal('0'),
                    total_margin=Decimal('0'),
                    products_count=0,
                    transactions_count=0,
                    unique_products_sold=0
                )
                logger.info(f"üìà Created new SupplierAnalytics for {supplier_name}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
            sale_amount = Decimal(str(transaction_item.price)) * transaction_item.quantity
            cost_amount = purchase_price * transaction_item.quantity
            
            analytics.total_quantity_sold += transaction_item.quantity
            analytics.total_revenue += sale_amount
            analytics.total_cost += cost_amount
            analytics.total_margin = analytics.total_revenue - analytics.total_cost
            analytics.transactions_count += 1
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
            if not analytics.unique_products_sold:
                analytics.unique_products_sold = 1
            else:
                analytics.unique_products_sold += 1
            
            analytics.products_count += 1
            
            # –í—ã–∑—ã–≤–∞–µ–º calculate_metrics –µ—Å–ª–∏ –µ—Å—Ç—å
            if hasattr(analytics, 'calculate_metrics'):
                analytics.calculate_metrics()
            
            analytics.save()
            
            logger.info(
                f"‚úÖ SupplierAnalytics updated for {supplier_name}: "
                f"revenue={analytics.total_revenue}, margin={analytics.total_margin}"
            )
            
        except Exception as e:
            logger.error(f"‚ùå Error updating SupplierAnalytics: {str(e)}", exc_info=True)
    
    except Exception as e:
        logger.error(f"‚ùå Error in process_sale_analytics: {str(e)}", exc_info=True)


def get_supplier_from_batches(product, store, size=None):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –∏–∑ –±–∞—Ç—á–µ–π —Ç–æ–≤–∞—Ä–∞
    
    Args:
        product: —ç–∫–∑–µ–º–ø–ª—è—Ä Product
        store: —ç–∫–∑–µ–º–ø–ª—è—Ä Store
        size: —ç–∫–∑–µ–º–ø–ª—è—Ä SizeInfo (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    
    Returns:
        str: –∏–º—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –∏–ª–∏ "Unknown"
    """
    try:
        # –£ Product –µ—Å—Ç—å related_name='batches' –æ—Ç ProductBatch
        batches = product.batches.filter(store=store)
        
        if not batches.exists():
            # –ï—Å–ª–∏ –Ω–µ—Ç –±–∞—Ç—á–µ–π –¥–ª—è —ç—Ç–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞, –±–µ—Ä–µ–º –ª—é–±–æ–π
            batches = product.batches.all()
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –≤—ã–±–æ—Ä–∞ –±–∞—Ç—á–∞:
        # 1. –ë–∞—Ç—á —Å –Ω—É–∂–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º
        if size:
            batch = batches.filter(size=size).order_by('-created_at').first()
            if batch and batch.supplier:
                logger.info(f"Found supplier from size-specific batch: {batch.supplier}")
                return batch.supplier
        
        # 2. –ë–∞—Ç—á —Å –æ—Å—Ç–∞—Ç–∫–æ–º —Ç–æ–≤–∞—Ä–∞
        batch = batches.filter(quantity__gt=0).order_by('-quantity').first()
        if batch and batch.supplier:
            logger.info(f"Found supplier from batch with stock: {batch.supplier}")
            return batch.supplier
        
        # 3. –ü–æ—Å–ª–µ–¥–Ω–∏–π –±–∞—Ç—á
        batch = batches.order_by('-created_at').first()
        if batch and batch.supplier:
            logger.info(f"Found supplier from latest batch: {batch.supplier}")
            return batch.supplier
        
        logger.warning(f"No supplier found for {product.name}")
        
    except Exception as e:
        logger.error(f"Error getting supplier from batches: {str(e)}")
    
    return "Unknown"


def update_batch_attributes_on_sale(product, quantity, size, store):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –∞—Ç—Ä–∏–±—É—Ç—ã –±–∞—Ç—á–µ–π –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
    """
    try:
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞—Ç—á–µ–π
        # –ù–∞–ø—Ä–∏–º–µ—Ä, —É–º–µ–Ω—å—à–µ–Ω–∏–µ quantity –≤ –±–∞—Ç—á–∞—Ö –ø–æ FIFO
        pass
    except Exception as e:
        logger.error(f"Error updating batch attributes: {str(e)}")


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
@receiver(post_save, sender='analytics.SupplierAnalytics')
def debug_supplier_analytics_save(sender, instance, created, **kwargs):
    """
    –û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Å–∏–≥–Ω–∞–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è SupplierAnalytics
    """
    if created:
        logger.info(f"üÜï SupplierAnalytics created: {instance.supplier} - {instance.date}")
    else:
        logger.info(f"üìù SupplierAnalytics updated: {instance.supplier} - revenue: {instance.total_revenue}")


def update_batch_attributes_on_sale(product, sold_quantity, size_instance, store):
    """
    –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏ –ø–æ –±–∞—Ç—á–∞–º —Ç–æ–≤–∞—Ä–∞
    """
    from inventory.models import ProductBatch
    
    # –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—ã–µ –±–∞—Ç—á–∏
    active_batches = ProductBatch.objects.filter(
        product=product,
        store=store,
        quantity__gt=0
    ).order_by('created_at')  # FIFO
    
    if not active_batches.exists():
        logger.debug(f"No active batches for {product.name}")
        return
    
    remaining_to_sell = sold_quantity
    
    for batch in active_batches:
        if remaining_to_sell <= 0:
            break
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å–∫–æ–ª—å–∫–æ –≤–∑—è—Ç—å –∏–∑ —ç—Ç–æ–≥–æ –±–∞—Ç—á–∞
        batch_share = min(batch.quantity, remaining_to_sell)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞—Ç—á
        batch.quantity -= batch_share
        batch.save(update_fields=['quantity'])
        
        remaining_to_sell -= batch_share
        
        logger.debug(f"Updated batch {batch.id}: -{batch_share}, remaining: {batch.quantity}")
    
    if remaining_to_sell > 0:
        logger.warning(f"‚ö†Ô∏è Could not allocate full sale {sold_quantity} for {product.name}, "
                      f"remaining: {remaining_to_sell}")


logger.info("‚úÖ Sales signals loaded successfully")