# sales/signals.py - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
from django.db.models.signals import post_save
from django.dispatch import receiver
from sales.models import Transaction, TransactionHistory
import logging
import json

logger = logging.getLogger('sales')

@receiver(post_save, sender=Transaction)
def create_transaction_history(sender, instance, created, **kwargs):
    """
    ‚úÖ –ï–î–ò–ù–°–¢–í–ï–ù–ù–ê–Ø –∑–∞–¥–∞—á–∞: —Å–æ–∑–¥–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ analytics/signals.py
    """

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    if created:
        action = 'created'
    else:
        action = instance.status

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
    important_actions = ['created', 'completed', 'refunded']
    if action not in important_actions:
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –µ—Å—Ç—å store
    if not hasattr(instance, 'store') or not instance.store:
        logger.error(f"‚ùå Transaction {instance.id} has no store, cannot create history")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –∑–∞–ø–∏—Å—å
    existing_record = TransactionHistory.objects.filter(
        transaction=instance,
        action=action
    ).first()

    if existing_record:
        logger.info(f"üìù History record already exists for transaction {instance.id}, action {action}")
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        details = _build_transaction_details(instance)
        existing_record.details = json.dumps(details, ensure_ascii=False)
        existing_record.save()
        return

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –∏—Å—Ç–æ—Ä–∏–∏
    details = _build_transaction_details(instance)

    try:
        TransactionHistory.objects.create(
            transaction=instance,
            action=action,
            details=json.dumps(details, ensure_ascii=False),
            store=instance.store
        )
        logger.info(f"‚úÖ Created transaction history for {instance.id} with action '{action}' in store {instance.store.name}")
    except Exception as e:
        logger.error(f"‚ùå Error creating transaction history for {instance.id}: {str(e)}")


def _build_transaction_details(instance):
    """–°–æ–∑–¥–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é"""
    try:
        items = [
            {
                'product': item.product.name,
                'quantity': item.quantity,
                'price': str(item.price),
                'subtotal': str(item.quantity * item.price)
            }
            for item in instance.items.all()
        ]
    except Exception as e:
        logger.error(f"Error building items for transaction {instance.id}: {str(e)}")
        items = []

    return {
        'transaction_id': instance.id,
        'total_amount': str(instance.total_amount),
        'payment_method': instance.payment_method,
        'cashier': instance.cashier.username if instance.cashier else None,
        'customer': instance.customer.full_name if instance.customer else None,
        'items_count': len(items),
        'items': items,
        'store_id': str(instance.store.id),
        'store_name': instance.store.name
    }